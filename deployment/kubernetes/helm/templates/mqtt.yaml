
{{- range $scenarioIdx, $scenarioName := $.Values.scenario }}
{{- $args := dict "scenarioName" $scenarioName "Values" $.Values }}
{{- range $officeIdx := until ( int ( include "smtc.noffices" $args ) ) }}
{{- $officeName := printf "%s-office%d" $scenarioName (add $officeIdx 1) }}
{{- $scope1 := printf "office%d-svc" (add $officeIdx 1) }}
{{- if contains $.Values.buildScope $scope1 }}

apiVersion: v1
kind: Service
metadata:
  name: {{ $officeName }}-mqtt-service
  labels:
    app: {{ $officeName }}-mqtt
spec:
  ports:
  - port: 8883
    protocol: TCP
  selector:
    app: {{ $officeName }}-mqtt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-mqtt
  labels:
     app: {{ $officeName }}-mqtt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $officeName }}-mqtt
  template:
    metadata:
      labels:
        app: {{ $officeName }}-mqtt
    spec:
      enableServiceLinks: false
      containers:
        - name: {{ $officeName }}-mqtt
          image: {{ $.Values.registryPrefix }}smtc_mqttserver{{ $.Values.releaseSuffix }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8883
          env:
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /var/run/secrets
              name: mqtt-server-certificate
              readOnly: true
          securityContext:
            runAsUser: 1883
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
          - name: mqtt-server-certificate
            secret:
              secretName: mqtt{{ add $officeIdx 1 }}-server-certificate
      {{ include "smtc.platform.node-selector" $ }}

{{- end }}
---

{{- end }}
{{- end }}
