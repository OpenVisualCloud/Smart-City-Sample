
{{- range $scenarioIdx, $scenarioName := $.Values.scenario }}
{{- $args := dict "scenarioName" $scenarioName "Values" $.Values }}
{{- range $officeIdx := until ( int ( include "smtc.noffices" $args ) ) }}
{{- $officeName := printf "%s-office%d" $scenarioName (add $officeIdx 1) }}
{{- $scope1 := printf "office%d-svc" (add $officeIdx 1) }}
{{- if contains $.Values.buildScope $scope1 }}

{{- $args := dict "scenarioName" $scenarioName "Values" $.Values }}
{{- $nanalytics := include "smtc.nanalytics" $args }}
{{- $args := dict "Values" $.Values }}
{{- $cameraGateway := include "smtc.cameraGateway" $args }}

{{- if eq $scenarioName "traffic" }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-analytics-traffic
  labels:
    app: {{ $officeName }}-analytics-traffic
spec:
  replicas: {{ $nanalytics }}
  selector:
    matchLabels:
      app: {{ $officeName }}-analytics-traffic
  template:
    metadata:
      labels:
        app: {{ $officeName }}-analytics-traffic
    spec:
      enableServiceLinks: false
      {{- if and ($.Values.discoverIPCamera) ( eq $cameraGateway "disable" ) }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      containers:
        - name: {{ $officeName }}-analytics-traffic
          image: {{ $.Values.registryPrefix }}smtc_analytics_object_{{ include "smtc.platform.suffix" $ }}_{{ $.Values.framework }}{{ $.Values.releaseSuffix }}
          imagePullPolicy: IfNotPresent
          env:
            - name: OFFICE
              {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
              value: {{ include "smtc.env.office" $args | quote }}
            - name: DBHOST
              {{- $args := dict "officeName" $officeName "Values" $.Values }}
              value: {{ include "smtc.env.dbhost" $args | quote }}
            - name: MQTTHOST
              value: "{{ $officeName }}-mqtt-service"
            - name: MQTT_TOPIC
              {{- if (int $.Values.otType) }}
              value: "relayanalytics"
              {{- else }}
              value: "analytics"
              {{- end }}
            - name: STHOST
              value: "http://{{ $officeName }}-storage-service:8080/api/upload"
            - name: EVERY_NTH_FRAME
              value: "6"
            - name: SCENARIO
              value: {{ $scenarioName | quote }}
            - name: NETWORK_PREFERENCE
              value: "{\"{{ include "smtc.platform.device" $ }}\":\"{{ $.Values.networkPreference }}\"}"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /var/run/secrets
              name: mqtt-client-certificate
              readOnly: true
            {{- include "smtc.platform.mounts" $ }}
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
          - name: mqtt-client-certificate
            secret:
              secretName: mqtt{{ add $officeIdx 1 }}-client-certificate
          {{- include "smtc.platform.volumes" $ }}
      {{ include "smtc.platform.accel-selector" $ }}

{{- else if eq $scenarioName "stadium" }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-analytics-entrance
  labels:
     app: {{ $officeName }}-analytics-entrance
spec:
  replicas: {{ $.Values.nanalytics.entrance }}
  selector:
    matchLabels:
      app: {{ $officeName }}-analytics-entrance
  template:
    metadata:
      labels:
        app: {{ $officeName }}-analytics-entrance
    spec:
      enableServiceLinks: false
      {{- if and ($.Values.discoverIPCamera) ( eq $cameraGateway "disable" ) }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      containers:
        - name: {{ $officeName }}-analytics-entrance
          image: {{ $.Values.registryPrefix }}smtc_analytics_entrance_{{ include "smtc.platform.suffix" $ }}_{{ $.Values.framework }}{{ $.Values.releaseSuffix }}
          imagePullPolicy: IfNotPresent
          env:
            - name: OFFICE
              {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
              value: {{ include "smtc.env.office" $args | quote }}
            - name: DBHOST
              {{- $args := dict "officeName" $officeName "Values" $.Values }}
              value: {{ include "smtc.env.dbhost" $args | quote }}
            - name: MQTTHOST
              value: "{{ $officeName }}-mqtt-service"
            - name: MQTT_TOPIC
              {{- if (int $.Values.otType) }}
              value: "relayanalytics"
              {{- else }}
              value: "analytics"
              {{- end }}
            - name: STHOST
              value: "http://{{ $officeName }}-storage-service:8080/api/upload"
            - name: EVERY_NTH_FRAME
              value: "6"
            - name: SCENARIO
              value: {{ $scenarioName | quote }}
            - name: NETWORK_PREFERENCE
              value: "{\"{{ include "smtc.platform.device" $ }}\":\"{{ $.Values.networkPreference }}\"}"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /tmp/rec
              name: recording
            - mountPath: /var/run/secrets
              name: mqtt-client-certificate
              readOnly: true
            {{- include "smtc.platform.mounts" $ }}
      initContainers:
            - image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: init
              command: ["/bin/chown","{{ $.Values.userId }}:{{ $.Values.groupId }}","/tmp/rec"]
              volumeMounts:
                - mountPath: /tmp/rec
                  name: recording
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
          - name: recording
            emptyDir:
                medium: Memory
                sizeLimit: 150Mi
          - name: mqtt-client-certificate
            secret:
              secretName: mqtt{{ add $officeIdx 1 }}-client-certificate
          {{- include "smtc.platform.volumes" $ }}
      {{ include "smtc.platform.accel-selector" $ }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-analytics-crowd
  labels:
     app: {{ $officeName }}-analytics-crowd
spec:
  replicas: {{ $.Values.nanalytics.crowd }}
  selector:
    matchLabels:
      app: {{ $officeName }}-analytics-crowd
  template:
    metadata:
      labels:
        app: {{ $officeName }}-analytics-crowd
    spec:
      enableServiceLinks: false
      {{- if and ($.Values.discoverIPCamera) ( eq $cameraGateway "disable" ) }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      containers:
        - name: {{ $officeName }}-analytics-crowd
          image: {{ $.Values.registryPrefix }}smtc_analytics_crowd_{{ include "smtc.platform.suffix" $ }}_{{ $.Values.framework }}{{ $.Values.releaseSuffix }}
          imagePullPolicy: IfNotPresent
          env:
            - name: OFFICE
              {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
              value: {{ include "smtc.env.office" $args | quote }}
            - name: DBHOST
              {{- $args := dict "officeName" $officeName "Values" $.Values }}
              value: {{ include "smtc.env.dbhost" $args | quote }}
            - name: MQTTHOST
              value: "{{ $officeName }}-mqtt-service"
            - name: MQTT_TOPIC
              value: "analytics"
            - name: STHOST
              value: "http://{{ $officeName }}-storage-service:8080/api/upload"
            - name: EVERY_NTH_FRAME
              value: "30"
            - name: SCENARIO
              value: {{ $scenarioName | quote }}
            - name: NETWORK_PREFERENCE
              value: "{\"{{ include "smtc.platform.device" $ }}\":\"{{ $.Values.networkPreference }}\"}"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /tmp/rec
              name: recording
            - mountPath: /var/run/secrets
              name: mqtt-client-certificate
              readOnly: true
            {{- include "smtc.platform.mounts" $ }}
      initContainers:
            - image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: init
              command: ["/bin/chown","{{ $.Values.userId }}:{{ $.Values.groupId }}","/tmp/rec"]
              volumeMounts:
                - mountPath: /tmp/rec
                  name: recording
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
          - name: recording
            emptyDir:
                medium: Memory
                sizeLimit: 150Mi
          - name: mqtt-client-certificate
            secret:
              secretName: mqtt{{ add $officeIdx 1 }}-client-certificate
          {{- include "smtc.platform.volumes" $ }}
      {{ include "smtc.platform.accel-selector" $ }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $officeName }}-analytics-svcq
  labels:
     app: {{ $officeName }}-analytics-svcq
spec:
  replicas: {{ $.Values.nanalytics.svcq }}
  selector:
    matchLabels:
      app: {{ $officeName }}-analytics-svcq
  template:
    metadata:
      labels:
        app: {{ $officeName }}-analytics-svcq
    spec:
      enableServiceLinks: false
      {{- if and ($.Values.discoverIPCamera) ( eq $cameraGateway "disable" ) }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      containers:
        - name: {{ $officeName }}-analytics-svcq
          image: {{ $.Values.registryPrefix }}smtc_analytics_object_{{ include "smtc.platform.suffix" $ }}_{{ $.Values.framework }}{{ $.Values.releaseSuffix }}
          imagePullPolicy: IfNotPresent
          env:
            - name: OFFICE
              {{- $args := dict "scenarioName" $scenarioName "Values" $.Values "officeIdx" $officeIdx }}
              value: {{ include "smtc.env.office" $args | quote }}
            - name: DBHOST
              {{- $args := dict "officeName" $officeName "Values" $.Values }}
              value: {{ include "smtc.env.dbhost" $args | quote }}
            - name: MQTTHOST
              value: "{{ $officeName }}-mqtt-service"
            - name: MQTT_TOPIC
              {{- if (int $.Values.otType) }}
              value: "relayanalytics"
              {{- else }}
              value: "analytics"
              {{- end }}
            - name: STHOST
              value: "http://{{ $officeName }}-storage-service:8080/api/upload"
            - name: EVERY_NTH_FRAME
              value: "6"
            - name: SCENARIO
              value: {{ $scenarioName | quote }}
            - name: NETWORK_PREFERENCE
              value: "{\"{{ include "smtc.platform.device" $ }}\":\"{{ $.Values.networkPreference }}\"}"
            - name: NO_PROXY
              value: "*"
            - name: no_proxy
              value: "*"
          volumeMounts:
            - mountPath: /etc/localtime
              name: timezone
              readOnly: true
            - mountPath: /tmp/rec
              name: recording
            - mountPath: /var/run/secrets
              name: mqtt-client-certificate
              readOnly: true
            {{- include "smtc.platform.mounts" $ }}
      initContainers:
            - image: busybox:latest
              imagePullPolicy: IfNotPresent
              name: init
              command: ["/bin/chown","{{ $.Values.userId }}:{{ $.Values.groupId }}","/tmp/rec"]
              volumeMounts:
                - mountPath: /tmp/rec
                  name: recording
      volumes:
          - name: timezone
            hostPath:
                path: /etc/localtime
                type: File
          - name: recording
            emptyDir:
                medium: Memory
                sizeLimit: 150Mi
          - name: mqtt-client-certificate
            secret:
              secretName: mqtt{{ add $officeIdx 1 }}-client-certificate
          {{- include "smtc.platform.volumes" $ }}
      {{ include "smtc.platform.accel-selector" $ }}
{{- end }}
{{- end }}

---
{{- end }}
{{- end }}
